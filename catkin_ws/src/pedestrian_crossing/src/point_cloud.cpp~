#include "point_cloud_functions.hpp" 

void cloud_cb (const sensor_msgs::PointCloud2& input)
{	

	//pcl::visualization::CloudViewer viewer ("Simple Cloud Viewer");
	/*
	std::cout << "width is " <<input.width << std::endl;
	std::cout << "height is " << input.height << std::endl;
	*/

	//Declaration and instantiation of a cloud pointer to be used for output
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_pcl(new pcl::PointCloud<pcl::PointXYZRGB>);

	//Input of the above cloud and the corresponding output of cloud_pcl
	pcl::fromROSMsg(input, *cloud_pcl); //it will be used for the plane detection algorithm

	int cloudsize = (cloud_pcl->width) * (cloud_pcl->height);

	int i = 0;
	uint32_t RGB;
	//int good = 0, not_good = 0, not_good_Y1 = 0, not_good_Y2 = 0;

	//rgb fields not found from "fromROSMsg" function, we put them inside manually
    if (cloudsize) { //the pointcloud is not empty
        for (int h=0; h<input.height; ++h) {
            for (int w=0; w<input.width; ++w, ++i) {

					RGB = input.data[i * 16 + 12]; 			//offset 12 == RGB
					cloud_pcl->points[i].rgb = RGB;
            }
        }
    }
	
	//viewer.showCloud (boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGB> >(cloud_pcl));

	///////////////////// reprojection of pcl::pointcloud ///////////////////////////////////
	uint8_t r;
	uint8_t g;
	uint8_t b;
	cv::Mat result; 
	i = 0;

    result = cv::Mat(cloud_pcl->height, cloud_pcl->width, CV_8UC3);
	
    if (cloudsize) { //the pointcloud is not empty
        for (int h=0; h<result.rows; ++h) {
            for (int w=0; w<result.cols; ++w, ++i) {
				
				RGB = uint32_t(cloud_pcl->points[i].rgb);

				//out of interest points:
				if(((input.data[i * 16 ] == 0) && (input.data[i * 16 + 4] == 0) && (input.data[i * 16 + 8] == 0)) && i < cloudsize/2){ //filter points out cloud
					result.at<cv::Vec3b>(h,w)[0] = 0;
                	result.at<cv::Vec3b>(h,w)[1] = 0;
                	result.at<cv::Vec3b>(h,w)[2] = 0;
					//not_good++;
				}
				/*else if((cloud_pcl->points[i].y > 1.4)){ //filter on Y
					result.at<cv::Vec3b>(h,w)[0] = 0;
                	result.at<cv::Vec3b>(h,w)[1] = 0; //255
                	result.at<cv::Vec3b>(h,w)[2] = 0;
					//not_good_Y1++;
				}*/
				else if((cloud_pcl->points[i].y < 0.9)){ //filter on Y
					result.at<cv::Vec3b>(h,w)[0] = 0; //255
                	result.at<cv::Vec3b>(h,w)[1] = 0;
                	result.at<cv::Vec3b>(h,w)[2] = 0; //255
					//not_good_Y2++;
				}

				//good points:
				else{
					r = ( RGB >> 16) & 0x0000ff;
					g = ( RGB >> 8) & 0x0000ff;
					b = ( RGB ) & 0x0000ff;

               	 	result.at<cv::Vec3b>(h,w)[0] = b;
                	result.at<cv::Vec3b>(h,w)[1] = g;
                	result.at<cv::Vec3b>(h,w)[2] = r;
					//good++;
				}
            }
        }
    }

		//std::cout << "GOOD : " << good << " NOT GOOD : " << not_good << " NOT GOOD Y1 : " << not_good_Y1 << " NOT GOOD Y2 : " << not_good_Y2 << std::endl;
		cvtColor(result, result, CV_RGB2GRAY);
		cv::imshow("img",result);
		cv::waitKey(3);	

//////////////////// Uncomment this to write on the file X,Y,Z coordinates of input pointcloud2 /////////////////////////////////////

/*	if(repetitions <= 0){
  		i = 0;
  		for (int32_t u = 0; u < input.height; ++u) {
  	 		for (int32_t v = 0; v < input.width; ++v, ++i) {
				if(double(input.data[i * 16 + 0]) != 0)
        			myfile << "X : " << double(input.data[i * 16 + 0]) << std::endl;
				if(double(input.data[i * 16 + 4]) != 0)
        			myfile << "Y : " << double(input.data[i * 16 + 4]) << std::endl;
				if(double(input.data[i * 16 + 8]) != 0)
        			myfile << "Z : " << double(input.data[i * 16 + 8]) << std::endl;
     		 } 
  		 }
		repetitions++;
	}
*/


//////////////////// Uncomment this to write on the file Y coordinates of input pointcloud2 /////////////////////////////////////
/*if(repetitions <= 0){
  		i = 0;
  		for (int32_t u = 0; u < cloud_pcl->height; ++u) {
  	 		for (int32_t v = 0; v < cloud_pcl->width; ++v, ++i) {
				
				if(double(input.data[i * 16 + 4]) != 0)
        			myfile << "Y : " << double(cloud_pcl->points[i].y) << std::endl;
			
     		 } 
  		 }
		repetitions++;
	}
*/

//////////////////// Uncomment this to write on the RGB value of input pointcloud2 /////////////////////////////////////

/* 	if(for_time <= 0){
		for (int32_t u = 0; u < input.height / 10; ++u) {
   			for (int32_t v = 0; v < input.width /100; ++v, ++i) {
       			if(double(input.data[i * 16 + 12]) != 0)
          			myfile << "RGB_DOUBLE: " << double(input.data[i * 16 + 12]) << " RGB_UINT32: " << uint32_t(input.data[i * 16 + 12]) << "        ";
    		}
  		}
	}
}*/

	//for_time++;
	
///////////////////// uncomment this to do the reprojection of pointcloud2 input ///////////////////////////////////
/*	uint32_t RGB_input;
	uint8_t r_input;
	uint8_t g_input;
	uint8_t b_input;
	cv::Mat result_input; 

    result_input = cv::Mat(input.height, input.width, CV_8UC3);
    i = 0;
    if (input.height * input.width) { //the pointcloud is not empty

        for (int h=0; h<result_input.rows; ++h) {
            for (int w=0; w<result_input.cols; ++w, ++i) {
				
				RGB_input = input.data[i * 16 + 12];
				r_input = ( RGB_input >> 16) & 0x0000ff;
				g_input = ( RGB_input >> 8) & 0x0000ff;
				b_input = ( RGB_input ) & 0x0000ff;

                result_input.at<cv::Vec3b>(h,w)[0] = b_input;
                result_input.at<cv::Vec3b>(h,w)[1] = g_input;
                result_input.at<cv::Vec3b>(h,w)[2] = r_input;
            }
        }
    }

	//cvtColor(result_input, result_input, CV_RGB2GRAY);
	cv::imshow("img_not_filtered",result_input);
	cv::waitKey(3);	

*/
}


