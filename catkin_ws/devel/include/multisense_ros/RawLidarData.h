/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/drc/catkin_ws/src/multisense-3.1/multisense_ros/msg/RawLidarData.msg
 *
 */


#ifndef MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H
#define MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawLidarData_
{
  typedef RawLidarData_<ContainerAllocator> Type;

  RawLidarData_()
    : scan_count(0)
    , time_start()
    , time_end()
    , angle_start(0)
    , angle_end(0)
    , distance()
    , intensity()  {
    }
  RawLidarData_(const ContainerAllocator& _alloc)
    : scan_count(0)
    , time_start()
    , time_end()
    , angle_start(0)
    , angle_end(0)
    , distance(_alloc)
    , intensity(_alloc)  {
    }



   typedef uint32_t _scan_count_type;
  _scan_count_type scan_count;

   typedef ros::Time _time_start_type;
  _time_start_type time_start;

   typedef ros::Time _time_end_type;
  _time_end_type time_end;

   typedef int32_t _angle_start_type;
  _angle_start_type angle_start;

   typedef int32_t _angle_end_type;
  _angle_end_type angle_end;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _distance_type;
  _distance_type distance;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _intensity_type;
  _intensity_type intensity;




  typedef boost::shared_ptr< ::multisense_ros::RawLidarData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawLidarData_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct RawLidarData_

typedef ::multisense_ros::RawLidarData_<std::allocator<void> > RawLidarData;

typedef boost::shared_ptr< ::multisense_ros::RawLidarData > RawLidarDataPtr;
typedef boost::shared_ptr< ::multisense_ros::RawLidarData const> RawLidarDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::RawLidarData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::RawLidarData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace multisense_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'multisense_ros': ['/home/drc/catkin_ws/src/multisense-3.1/multisense_ros/msg'], 'geometry_msgs': ['/opt/ros/groovy/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/groovy/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/groovy/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6ed0471015a3cddab804db8e53836c1";
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6ed0471015a3cddULL;
  static const uint64_t static_value2 = 0xab804db8e53836c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/RawLidarData";
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 scan_count\n\
time time_start\n\
time time_end\n\
int32 angle_start\n\
int32 angle_end\n\
uint32[] distance\n\
uint32[] intensity\n\
";
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scan_count);
      stream.next(m.time_start);
      stream.next(m.time_end);
      stream.next(m.angle_start);
      stream.next(m.angle_end);
      stream.next(m.distance);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RawLidarData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::RawLidarData_<ContainerAllocator>& v)
  {
    s << indent << "scan_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_count);
    s << indent << "time_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_start);
    s << indent << "time_end: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_end);
    s << indent << "angle_start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_start);
    s << indent << "angle_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_end);
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "intensity[]" << std::endl;
    for (size_t i = 0; i < v.intensity.size(); ++i)
    {
      s << indent << "  intensity[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.intensity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H
