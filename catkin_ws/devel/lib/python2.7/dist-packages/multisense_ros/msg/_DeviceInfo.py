"""autogenerated by genpy from multisense_ros/DeviceInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DeviceInfo(genpy.Message):
  _md5sum = "c6474ecff79a7f51e0a82ca43d0cf444"
  _type = "multisense_ros/DeviceInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string deviceName
string buildDate
string serialNumber
uint32 deviceRevision

uint32    numberOfPcbs
uint32[] pcbSerialNumbers
string[] pcbNames

string imagerName
uint32 imagerType
uint32 imagerWidth
uint32 imagerHeight

string lensName
uint32 lensType
float32 nominalBaseline
float32 nominalFocalLength
float32 nominalRelativeAperture

uint32 lightingType
uint32 numberOfLights

string laserName
uint32 laserType

string motorName
uint32 motorType
float32 motorGearReduction

string apiBuildDate
uint16 apiVersion
string firmwareBuildDate
uint16 firmwareVersion

uint64 bitstreamVersion
uint64 bitstreamMagic
uint64 fpgaDna

"""
  __slots__ = ['deviceName','buildDate','serialNumber','deviceRevision','numberOfPcbs','pcbSerialNumbers','pcbNames','imagerName','imagerType','imagerWidth','imagerHeight','lensName','lensType','nominalBaseline','nominalFocalLength','nominalRelativeAperture','lightingType','numberOfLights','laserName','laserType','motorName','motorType','motorGearReduction','apiBuildDate','apiVersion','firmwareBuildDate','firmwareVersion','bitstreamVersion','bitstreamMagic','fpgaDna']
  _slot_types = ['string','string','string','uint32','uint32','uint32[]','string[]','string','uint32','uint32','uint32','string','uint32','float32','float32','float32','uint32','uint32','string','uint32','string','uint32','float32','string','uint16','string','uint16','uint64','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       deviceName,buildDate,serialNumber,deviceRevision,numberOfPcbs,pcbSerialNumbers,pcbNames,imagerName,imagerType,imagerWidth,imagerHeight,lensName,lensType,nominalBaseline,nominalFocalLength,nominalRelativeAperture,lightingType,numberOfLights,laserName,laserType,motorName,motorType,motorGearReduction,apiBuildDate,apiVersion,firmwareBuildDate,firmwareVersion,bitstreamVersion,bitstreamMagic,fpgaDna

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DeviceInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.deviceName is None:
        self.deviceName = ''
      if self.buildDate is None:
        self.buildDate = ''
      if self.serialNumber is None:
        self.serialNumber = ''
      if self.deviceRevision is None:
        self.deviceRevision = 0
      if self.numberOfPcbs is None:
        self.numberOfPcbs = 0
      if self.pcbSerialNumbers is None:
        self.pcbSerialNumbers = []
      if self.pcbNames is None:
        self.pcbNames = []
      if self.imagerName is None:
        self.imagerName = ''
      if self.imagerType is None:
        self.imagerType = 0
      if self.imagerWidth is None:
        self.imagerWidth = 0
      if self.imagerHeight is None:
        self.imagerHeight = 0
      if self.lensName is None:
        self.lensName = ''
      if self.lensType is None:
        self.lensType = 0
      if self.nominalBaseline is None:
        self.nominalBaseline = 0.
      if self.nominalFocalLength is None:
        self.nominalFocalLength = 0.
      if self.nominalRelativeAperture is None:
        self.nominalRelativeAperture = 0.
      if self.lightingType is None:
        self.lightingType = 0
      if self.numberOfLights is None:
        self.numberOfLights = 0
      if self.laserName is None:
        self.laserName = ''
      if self.laserType is None:
        self.laserType = 0
      if self.motorName is None:
        self.motorName = ''
      if self.motorType is None:
        self.motorType = 0
      if self.motorGearReduction is None:
        self.motorGearReduction = 0.
      if self.apiBuildDate is None:
        self.apiBuildDate = ''
      if self.apiVersion is None:
        self.apiVersion = 0
      if self.firmwareBuildDate is None:
        self.firmwareBuildDate = ''
      if self.firmwareVersion is None:
        self.firmwareVersion = 0
      if self.bitstreamVersion is None:
        self.bitstreamVersion = 0
      if self.bitstreamMagic is None:
        self.bitstreamMagic = 0
      if self.fpgaDna is None:
        self.fpgaDna = 0
    else:
      self.deviceName = ''
      self.buildDate = ''
      self.serialNumber = ''
      self.deviceRevision = 0
      self.numberOfPcbs = 0
      self.pcbSerialNumbers = []
      self.pcbNames = []
      self.imagerName = ''
      self.imagerType = 0
      self.imagerWidth = 0
      self.imagerHeight = 0
      self.lensName = ''
      self.lensType = 0
      self.nominalBaseline = 0.
      self.nominalFocalLength = 0.
      self.nominalRelativeAperture = 0.
      self.lightingType = 0
      self.numberOfLights = 0
      self.laserName = ''
      self.laserType = 0
      self.motorName = ''
      self.motorType = 0
      self.motorGearReduction = 0.
      self.apiBuildDate = ''
      self.apiVersion = 0
      self.firmwareBuildDate = ''
      self.firmwareVersion = 0
      self.bitstreamVersion = 0
      self.bitstreamMagic = 0
      self.fpgaDna = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.deviceName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.buildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.serialNumber
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.deviceRevision, _x.numberOfPcbs))
      length = len(self.pcbSerialNumbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.pcbSerialNumbers))
      length = len(self.pcbNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.pcbNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.imagerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.imagerType, _x.imagerWidth, _x.imagerHeight))
      _x = self.lensName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I3f2I.pack(_x.lensType, _x.nominalBaseline, _x.nominalFocalLength, _x.nominalRelativeAperture, _x.lightingType, _x.numberOfLights))
      _x = self.laserName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.laserType))
      _x = self.motorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_If.pack(_x.motorType, _x.motorGearReduction))
      _x = self.apiBuildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_H.pack(self.apiVersion))
      _x = self.firmwareBuildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H3Q.pack(_x.firmwareVersion, _x.bitstreamVersion, _x.bitstreamMagic, _x.fpgaDna))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.deviceName = str[start:end].decode('utf-8')
      else:
        self.deviceName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.buildDate = str[start:end].decode('utf-8')
      else:
        self.buildDate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serialNumber = str[start:end].decode('utf-8')
      else:
        self.serialNumber = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.deviceRevision, _x.numberOfPcbs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.pcbSerialNumbers = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pcbNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pcbNames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagerName = str[start:end].decode('utf-8')
      else:
        self.imagerName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imagerType, _x.imagerWidth, _x.imagerHeight,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lensName = str[start:end].decode('utf-8')
      else:
        self.lensName = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.lensType, _x.nominalBaseline, _x.nominalFocalLength, _x.nominalRelativeAperture, _x.lightingType, _x.numberOfLights,) = _struct_I3f2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laserName = str[start:end].decode('utf-8')
      else:
        self.laserName = str[start:end]
      start = end
      end += 4
      (self.laserType,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorName = str[start:end].decode('utf-8')
      else:
        self.motorName = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.motorType, _x.motorGearReduction,) = _struct_If.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.apiBuildDate = str[start:end].decode('utf-8')
      else:
        self.apiBuildDate = str[start:end]
      start = end
      end += 2
      (self.apiVersion,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmwareBuildDate = str[start:end].decode('utf-8')
      else:
        self.firmwareBuildDate = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.firmwareVersion, _x.bitstreamVersion, _x.bitstreamMagic, _x.fpgaDna,) = _struct_H3Q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.deviceName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.buildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.serialNumber
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.deviceRevision, _x.numberOfPcbs))
      length = len(self.pcbSerialNumbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pcbSerialNumbers.tostring())
      length = len(self.pcbNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.pcbNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.imagerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.imagerType, _x.imagerWidth, _x.imagerHeight))
      _x = self.lensName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_I3f2I.pack(_x.lensType, _x.nominalBaseline, _x.nominalFocalLength, _x.nominalRelativeAperture, _x.lightingType, _x.numberOfLights))
      _x = self.laserName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.laserType))
      _x = self.motorName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_If.pack(_x.motorType, _x.motorGearReduction))
      _x = self.apiBuildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_H.pack(self.apiVersion))
      _x = self.firmwareBuildDate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_H3Q.pack(_x.firmwareVersion, _x.bitstreamVersion, _x.bitstreamMagic, _x.fpgaDna))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.deviceName = str[start:end].decode('utf-8')
      else:
        self.deviceName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.buildDate = str[start:end].decode('utf-8')
      else:
        self.buildDate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.serialNumber = str[start:end].decode('utf-8')
      else:
        self.serialNumber = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.deviceRevision, _x.numberOfPcbs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.pcbSerialNumbers = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pcbNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.pcbNames.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagerName = str[start:end].decode('utf-8')
      else:
        self.imagerName = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imagerType, _x.imagerWidth, _x.imagerHeight,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lensName = str[start:end].decode('utf-8')
      else:
        self.lensName = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.lensType, _x.nominalBaseline, _x.nominalFocalLength, _x.nominalRelativeAperture, _x.lightingType, _x.numberOfLights,) = _struct_I3f2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.laserName = str[start:end].decode('utf-8')
      else:
        self.laserName = str[start:end]
      start = end
      end += 4
      (self.laserType,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motorName = str[start:end].decode('utf-8')
      else:
        self.motorName = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.motorType, _x.motorGearReduction,) = _struct_If.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.apiBuildDate = str[start:end].decode('utf-8')
      else:
        self.apiBuildDate = str[start:end]
      start = end
      end += 2
      (self.apiVersion,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmwareBuildDate = str[start:end].decode('utf-8')
      else:
        self.firmwareBuildDate = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.firmwareVersion, _x.bitstreamVersion, _x.bitstreamMagic, _x.fpgaDna,) = _struct_H3Q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H = struct.Struct("<H")
_struct_3I = struct.Struct("<3I")
_struct_H3Q = struct.Struct("<H3Q")
_struct_I3f2I = struct.Struct("<I3f2I")
_struct_2I = struct.Struct("<2I")
_struct_If = struct.Struct("<If")
