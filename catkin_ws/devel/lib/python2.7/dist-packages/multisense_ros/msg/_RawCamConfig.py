"""autogenerated by genpy from multisense_ros/RawCamConfig.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RawCamConfig(genpy.Message):
  _md5sum = "cfc6caf0d17e5d50531b927f32fd6a90"
  _type = "multisense_ros/RawCamConfig"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16  width
uint16  height
float32 frames_per_second
float32 gain
uint32  exposure_time
float32 fx
float32 fy
float32 cx
float32 cy
float32 tx
float32 ty
float32 tz
float32 roll
float32 pitch
float32 yaw

"""
  __slots__ = ['width','height','frames_per_second','gain','exposure_time','fx','fy','cx','cy','tx','ty','tz','roll','pitch','yaw']
  _slot_types = ['uint16','uint16','float32','float32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,height,frames_per_second,gain,exposure_time,fx,fy,cx,cy,tx,ty,tz,roll,pitch,yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawCamConfig, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.frames_per_second is None:
        self.frames_per_second = 0.
      if self.gain is None:
        self.gain = 0.
      if self.exposure_time is None:
        self.exposure_time = 0
      if self.fx is None:
        self.fx = 0.
      if self.fy is None:
        self.fy = 0.
      if self.cx is None:
        self.cx = 0.
      if self.cy is None:
        self.cy = 0.
      if self.tx is None:
        self.tx = 0.
      if self.ty is None:
        self.ty = 0.
      if self.tz is None:
        self.tz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
    else:
      self.width = 0
      self.height = 0
      self.frames_per_second = 0.
      self.gain = 0.
      self.exposure_time = 0
      self.fx = 0.
      self.fy = 0.
      self.cx = 0.
      self.cy = 0.
      self.tx = 0.
      self.ty = 0.
      self.tz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2H2fI10f.pack(_x.width, _x.height, _x.frames_per_second, _x.gain, _x.exposure_time, _x.fx, _x.fy, _x.cx, _x.cy, _x.tx, _x.ty, _x.tz, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.width, _x.height, _x.frames_per_second, _x.gain, _x.exposure_time, _x.fx, _x.fy, _x.cx, _x.cy, _x.tx, _x.ty, _x.tz, _x.roll, _x.pitch, _x.yaw,) = _struct_2H2fI10f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2H2fI10f.pack(_x.width, _x.height, _x.frames_per_second, _x.gain, _x.exposure_time, _x.fx, _x.fy, _x.cx, _x.cy, _x.tx, _x.ty, _x.tz, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.width, _x.height, _x.frames_per_second, _x.gain, _x.exposure_time, _x.fx, _x.fy, _x.cx, _x.cy, _x.tx, _x.ty, _x.tz, _x.roll, _x.pitch, _x.yaw,) = _struct_2H2fI10f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2H2fI10f = struct.Struct("<2H2fI10f")
