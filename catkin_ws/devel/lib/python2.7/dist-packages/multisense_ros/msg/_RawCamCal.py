"""autogenerated by genpy from multisense_ros/RawCamCal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RawCamCal(genpy.Message):
  _md5sum = "1b8c86de8eb033489e8e49fb5532702e"
  _type = "multisense_ros/RawCamCal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[9]  left_M
float32[8]  left_D
float32[9]  left_R
float32[12] left_P
float32[9]  right_M
float32[8]  right_D
float32[9]  right_R
float32[12] right_P

"""
  __slots__ = ['left_M','left_D','left_R','left_P','right_M','right_D','right_R','right_P']
  _slot_types = ['float32[9]','float32[8]','float32[9]','float32[12]','float32[9]','float32[8]','float32[9]','float32[12]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_M,left_D,left_R,left_P,right_M,right_D,right_R,right_P

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawCamCal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_M is None:
        self.left_M = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.left_D is None:
        self.left_D = [0.,0.,0.,0.,0.,0.,0.,0.]
      if self.left_R is None:
        self.left_R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.left_P is None:
        self.left_P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.right_M is None:
        self.right_M = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.right_D is None:
        self.right_D = [0.,0.,0.,0.,0.,0.,0.,0.]
      if self.right_R is None:
        self.right_R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.right_P is None:
        self.right_P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
    else:
      self.left_M = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.left_D = [0.,0.,0.,0.,0.,0.,0.,0.]
      self.left_R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.left_P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.right_M = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.right_D = [0.,0.,0.,0.,0.,0.,0.,0.]
      self.right_R = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.right_P = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_9f.pack(*self.left_M))
      buff.write(_struct_8f.pack(*self.left_D))
      buff.write(_struct_9f.pack(*self.left_R))
      buff.write(_struct_12f.pack(*self.left_P))
      buff.write(_struct_9f.pack(*self.right_M))
      buff.write(_struct_8f.pack(*self.right_D))
      buff.write(_struct_9f.pack(*self.right_R))
      buff.write(_struct_12f.pack(*self.right_P))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 36
      self.left_M = _struct_9f.unpack(str[start:end])
      start = end
      end += 32
      self.left_D = _struct_8f.unpack(str[start:end])
      start = end
      end += 36
      self.left_R = _struct_9f.unpack(str[start:end])
      start = end
      end += 48
      self.left_P = _struct_12f.unpack(str[start:end])
      start = end
      end += 36
      self.right_M = _struct_9f.unpack(str[start:end])
      start = end
      end += 32
      self.right_D = _struct_8f.unpack(str[start:end])
      start = end
      end += 36
      self.right_R = _struct_9f.unpack(str[start:end])
      start = end
      end += 48
      self.right_P = _struct_12f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.left_M.tostring())
      buff.write(self.left_D.tostring())
      buff.write(self.left_R.tostring())
      buff.write(self.left_P.tostring())
      buff.write(self.right_M.tostring())
      buff.write(self.right_D.tostring())
      buff.write(self.right_R.tostring())
      buff.write(self.right_P.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 36
      self.left_M = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 32
      self.left_D = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 36
      self.left_R = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 48
      self.left_P = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 36
      self.right_M = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 32
      self.right_D = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 36
      self.right_R = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 48
      self.right_P = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
_struct_12f = struct.Struct("<12f")
_struct_9f = struct.Struct("<9f")
