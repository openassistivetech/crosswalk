"""autogenerated by genpy from multisense_ros/RawCamData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RawCamData(genpy.Message):
  _md5sum = "5088c19778d4fa49ece5e07c0880c7e3"
  _type = "multisense_ros/RawCamData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 frames_per_second
float32 gain
uint32  exposure_time
uint32  frame_count
time    time_stamp
uint32  angle
uint16  width
uint16  height
uint8[] gray_scale_image
uint16[] disparity_image

"""
  __slots__ = ['frames_per_second','gain','exposure_time','frame_count','time_stamp','angle','width','height','gray_scale_image','disparity_image']
  _slot_types = ['float32','float32','uint32','uint32','time','uint32','uint16','uint16','uint8[]','uint16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frames_per_second,gain,exposure_time,frame_count,time_stamp,angle,width,height,gray_scale_image,disparity_image

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawCamData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frames_per_second is None:
        self.frames_per_second = 0.
      if self.gain is None:
        self.gain = 0.
      if self.exposure_time is None:
        self.exposure_time = 0
      if self.frame_count is None:
        self.frame_count = 0
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      if self.angle is None:
        self.angle = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.gray_scale_image is None:
        self.gray_scale_image = ''
      if self.disparity_image is None:
        self.disparity_image = []
    else:
      self.frames_per_second = 0.
      self.gain = 0.
      self.exposure_time = 0
      self.frame_count = 0
      self.time_stamp = genpy.Time()
      self.angle = 0
      self.width = 0
      self.height = 0
      self.gray_scale_image = ''
      self.disparity_image = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f5I2H.pack(_x.frames_per_second, _x.gain, _x.exposure_time, _x.frame_count, _x.time_stamp.secs, _x.time_stamp.nsecs, _x.angle, _x.width, _x.height))
      _x = self.gray_scale_image
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.disparity_image)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.disparity_image))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.frames_per_second, _x.gain, _x.exposure_time, _x.frame_count, _x.time_stamp.secs, _x.time_stamp.nsecs, _x.angle, _x.width, _x.height,) = _struct_2f5I2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gray_scale_image = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.disparity_image = struct.unpack(pattern, str[start:end])
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f5I2H.pack(_x.frames_per_second, _x.gain, _x.exposure_time, _x.frame_count, _x.time_stamp.secs, _x.time_stamp.nsecs, _x.angle, _x.width, _x.height))
      _x = self.gray_scale_image
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.disparity_image)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.disparity_image.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.frames_per_second, _x.gain, _x.exposure_time, _x.frame_count, _x.time_stamp.secs, _x.time_stamp.nsecs, _x.angle, _x.width, _x.height,) = _struct_2f5I2H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.gray_scale_image = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.disparity_image = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f5I2H = struct.Struct("<2f5I2H")
