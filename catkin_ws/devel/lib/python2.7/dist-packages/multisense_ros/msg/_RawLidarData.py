"""autogenerated by genpy from multisense_ros/RawLidarData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RawLidarData(genpy.Message):
  _md5sum = "c6ed0471015a3cddab804db8e53836c1"
  _type = "multisense_ros/RawLidarData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 scan_count
time time_start
time time_end
int32 angle_start
int32 angle_end
uint32[] distance
uint32[] intensity

"""
  __slots__ = ['scan_count','time_start','time_end','angle_start','angle_end','distance','intensity']
  _slot_types = ['uint32','time','time','int32','int32','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       scan_count,time_start,time_end,angle_start,angle_end,distance,intensity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawLidarData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.scan_count is None:
        self.scan_count = 0
      if self.time_start is None:
        self.time_start = genpy.Time()
      if self.time_end is None:
        self.time_end = genpy.Time()
      if self.angle_start is None:
        self.angle_start = 0
      if self.angle_end is None:
        self.angle_end = 0
      if self.distance is None:
        self.distance = []
      if self.intensity is None:
        self.intensity = []
    else:
      self.scan_count = 0
      self.time_start = genpy.Time()
      self.time_end = genpy.Time()
      self.angle_start = 0
      self.angle_end = 0
      self.distance = []
      self.intensity = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5I2i.pack(_x.scan_count, _x.time_start.secs, _x.time_start.nsecs, _x.time_end.secs, _x.time_end.nsecs, _x.angle_start, _x.angle_end))
      length = len(self.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.distance))
      length = len(self.intensity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.intensity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_start is None:
        self.time_start = genpy.Time()
      if self.time_end is None:
        self.time_end = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.scan_count, _x.time_start.secs, _x.time_start.nsecs, _x.time_end.secs, _x.time_end.nsecs, _x.angle_start, _x.angle_end,) = _struct_5I2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.distance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.intensity = struct.unpack(pattern, str[start:end])
      self.time_start.canon()
      self.time_end.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5I2i.pack(_x.scan_count, _x.time_start.secs, _x.time_start.nsecs, _x.time_end.secs, _x.time_end.nsecs, _x.angle_start, _x.angle_end))
      length = len(self.distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.distance.tostring())
      length = len(self.intensity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.intensity.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_start is None:
        self.time_start = genpy.Time()
      if self.time_end is None:
        self.time_end = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.scan_count, _x.time_start.secs, _x.time_start.nsecs, _x.time_end.secs, _x.time_end.nsecs, _x.angle_start, _x.angle_end,) = _struct_5I2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.distance = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.intensity = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      self.time_start.canon()
      self.time_end.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5I2i = struct.Struct("<5I2i")
